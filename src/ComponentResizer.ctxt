#BlueJ class context
comment0.target=ComponentResizer
comment0.text=\r\n\ \ The\ ComponentResizer\ allows\ you\ to\ resize\ a\ component\ by\ dragging\ a\ border\r\n\ \ of\ the\ component.\r\n
comment1.params=
comment1.target=ComponentResizer()
comment1.text=\r\n\ \ Convenience\ contructor.\ All\ borders\ are\ resizable\ in\ increments\ of\r\n\ \ a\ single\ pixel.\ Components\ must\ be\ registered\ separately.\r\n
comment10.params=minimumSize
comment10.target=void\ setMinimumSize(java.awt.Dimension)
comment10.text=\r\n\ \ Specify\ the\ minimum\ size\ for\ the\ component.\ The\ minimum\ size\ is\r\n\ \ constrained\ by\ the\ drag\ insets.\r\n\r\n\ \ @param\ minimumSize\ the\ minimum\ size\ for\ a\ component.\r\n
comment11.params=components
comment11.target=void\ deregisterComponent(java.awt.Component[])
comment11.text=\r\n\ \ Remove\ listeners\ from\ the\ specified\ component\r\n\r\n\ \ @param\ component\ \ the\ component\ the\ listeners\ are\ removed\ from\r\n
comment12.params=components
comment12.target=void\ registerComponent(java.awt.Component[])
comment12.text=\r\n\ \ Add\ the\ required\ listeners\ to\ the\ specified\ component\r\n\r\n\ \ @param\ component\ \ the\ component\ the\ listeners\ are\ added\ to\r\n
comment13.params=
comment13.target=java.awt.Dimension\ getSnapSize()
comment13.text=\r\n\tGet\ the\ snap\ size.\r\n\r\n\ \ @return\ the\ snap\ size.\r\n
comment14.params=snapSize
comment14.target=void\ setSnapSize(java.awt.Dimension)
comment14.text=\r\n\ \ Control\ how\ many\ pixels\ a\ border\ must\ be\ dragged\ before\ the\ size\ of\r\n\ \ the\ component\ is\ changed.\ The\ border\ will\ snap\ to\ the\ size\ once\r\n\ \ dragging\ has\ passed\ the\ halfway\ mark.\r\n\r\n\ \ @param\ snapSize\ Dimension\ object\ allows\ you\ to\ separately\ spcify\ a\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ horizontal\ and\ vertical\ snap\ size.\r\n
comment15.params=minimum\ drag
comment15.target=void\ validateMinimumAndInsets(java.awt.Dimension,\ java.awt.Insets)
comment15.text=\r\n\ \ When\ the\ components\ minimum\ size\ is\ less\ than\ the\ drag\ insets\ then\r\n\twe\ can't\ determine\ which\ border\ should\ be\ resized\ so\ we\ need\ to\r\n\ \ prevent\ this\ from\ happening.\r\n
comment16.params=e
comment16.target=void\ mouseMoved(java.awt.event.MouseEvent)
comment16.text=\r\n
comment17.params=e
comment17.target=void\ mouseEntered(java.awt.event.MouseEvent)
comment18.params=e
comment18.target=void\ mouseExited(java.awt.event.MouseEvent)
comment19.params=e
comment19.target=void\ mousePressed(java.awt.event.MouseEvent)
comment2.params=components
comment2.target=ComponentResizer(java.awt.Component[])
comment2.text=\r\n\ \ Convenience\ contructor.\ All\ borders\ are\ resizable\ in\ increments\ of\r\n\ \ a\ single\ pixel.\ Components\ can\ be\ registered\ when\ the\ class\ is\ created\r\n\ \ or\ they\ can\ be\ registered\ separately\ afterwards.\r\n\r\n\ \ @param\ components\ components\ to\ be\ automatically\ registered\r\n
comment20.params=e
comment20.target=void\ mouseReleased(java.awt.event.MouseEvent)
comment20.text=\r\n\ \ Restore\ the\ original\ state\ of\ the\ Component\r\n
comment21.params=e
comment21.target=void\ mouseDragged(java.awt.event.MouseEvent)
comment21.text=\r\n\ \ Resize\ the\ component\ ensuring\ location\ and\ size\ is\ within\ the\ bounds\r\n\ \ of\ the\ parent\ container\ and\ that\ the\ size\ is\ within\ the\ minimum\ and\r\n\ \ maximum\ constraints.\r\n\r\n\ \ All\ calculations\ are\ done\ using\ the\ bounds\ of\ the\ component\ when\ the\r\n\ \ resizing\ started.\r\n
comment22.params=source\ direction\ bounds\ pressed\ current
comment22.target=void\ changeBounds(java.awt.Component,\ int,\ java.awt.Rectangle,\ java.awt.Point,\ java.awt.Point)
comment23.params=larger\ smaller\ snapSize
comment23.target=int\ getDragDistance(int,\ int,\ int)
comment23.text=\r\n\ \ Determine\ how\ far\ the\ mouse\ has\ moved\ from\ where\ dragging\ started\r\n
comment24.params=drag\ snapSize\ dimension\ minimum\ maximum
comment24.target=int\ getDragBounded(int,\ int,\ int,\ int,\ int)
comment24.text=\r\n\ \ Adjust\ the\ drag\ value\ to\ be\ within\ the\ minimum\ and\ maximum\ range.\r\n
comment25.params=source
comment25.target=java.awt.Dimension\ getBoundingSize(java.awt.Component)
comment25.text=\r\n\ \ Keep\ the\ size\ of\ the\ component\ within\ the\ bounds\ of\ its\ parent.\r\n
comment3.params=dragInsets\ components
comment3.target=ComponentResizer(java.awt.Insets,\ java.awt.Component[])
comment3.text=\r\n\ \ Convenience\ contructor.\ Eligible\ borders\ are\ resisable\ in\ increments\ of\r\n\ \ a\ single\ pixel.\ Components\ can\ be\ registered\ when\ the\ class\ is\ created\r\n\ \ or\ they\ can\ be\ registered\ separately\ afterwards.\r\n\r\n\ \ @param\ dragInsets\ Insets\ specifying\ which\ borders\ are\ eligible\ to\ be\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ resized.\r\n\ \ @param\ components\ components\ to\ be\ automatically\ registered\r\n
comment4.params=dragInsets\ snapSize\ components
comment4.target=ComponentResizer(java.awt.Insets,\ java.awt.Dimension,\ java.awt.Component[])
comment4.text=\r\n\ \ Create\ a\ ComponentResizer.\r\n\r\n\ \ @param\ dragInsets\ Insets\ specifying\ which\ borders\ are\ eligible\ to\ be\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ resized.\r\n\ \ @param\ snapSize\ Specify\ the\ dimension\ to\ which\ the\ border\ will\ snap\ to\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ when\ being\ dragged.\ Snapping\ occurs\ at\ the\ halfway\ mark.\r\n\ \ @param\ components\ components\ to\ be\ automatically\ registered\r\n
comment5.params=
comment5.target=java.awt.Insets\ getDragInsets()
comment5.text=\r\n\ \ Get\ the\ drag\ insets\r\n\r\n\ \ @return\ \ the\ drag\ insets\r\n
comment6.params=dragInsets
comment6.target=void\ setDragInsets(java.awt.Insets)
comment6.text=\r\n\ \ Set\ the\ drag\ dragInsets.\ The\ insets\ specify\ an\ area\ where\ mouseDragged\r\n\ \ events\ are\ recognized\ from\ the\ edge\ of\ the\ border\ inwards.\ A\ value\ of\r\n\ \ 0\ for\ any\ size\ will\ imply\ that\ the\ border\ is\ not\ resizable.\ Otherwise\r\n\ \ the\ appropriate\ drag\ cursor\ will\ appear\ when\ the\ mouse\ is\ inside\ the\r\n\ \ resizable\ border\ area.\r\n\r\n\ \ @param\ \ dragInsets\ Insets\ to\ control\ which\ borders\ are\ resizeable.\r\n
comment7.params=
comment7.target=java.awt.Dimension\ getMaximumSize()
comment7.text=\r\n\ \ Get\ the\ components\ maximum\ size.\r\n\r\n\ \ @return\ the\ maximum\ size\r\n
comment8.params=maximumSize
comment8.target=void\ setMaximumSize(java.awt.Dimension)
comment8.text=\r\n\ \ Specify\ the\ maximum\ size\ for\ the\ component.\ The\ component\ will\ still\r\n\ \ be\ constrained\ by\ the\ size\ of\ its\ parent.\r\n\r\n\ \ @param\ maximumSize\ the\ maximum\ size\ for\ a\ component.\r\n
comment9.params=
comment9.target=java.awt.Dimension\ getMinimumSize()
comment9.text=\r\n\ \ Get\ the\ components\ minimum\ size.\r\n\r\n\ \ @return\ the\ minimum\ size\r\n
numComments=26
